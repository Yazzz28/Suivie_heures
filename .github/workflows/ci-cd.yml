name: Docker CI with Tests

on:
    push:
        branches: [docker]
    pull_request:
        branches: [docker]

jobs:
    docker-tests:
        runs-on: ubuntu-latest
        environment: test
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Create .env file for Docker
              run: |
                  echo "DB_HOST=mysql" >> .env
                  echo "DB_PORT=3306" >> .env
                  echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
                  echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
                  echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
                  echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
                  echo "MYSQL_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
                  echo "MYSQL_USER=${{ secrets.DB_USERNAME }}" >> .env
                  echo "MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

            - name: Build and start containers
              run: |
                  docker-compose up -d --build
                  echo "Containers started, waiting for MySQL to be ready..."

            - name: Wait for MySQL to be ready
              run: |
                  echo "Waiting for MySQL to be ready..."
                  for i in {1..60}; do
                    if docker-compose exec -T mysql mysqladmin ping --silent; then
                      echo "MySQL is ready!"
                      break
                    fi
                    if [ $i -eq 60 ]; then
                      echo "MySQL failed to start within 2 minutes"
                      docker-compose logs mysql
                      exit 1
                    fi
                    echo "Attempt $i/60: MySQL not ready, waiting..."
                    sleep 2
                  done

            - name: Show container status
              run: |
                  echo "=== Container Status ==="
                  docker-compose ps
                  echo "=== PHP Container Info ==="
                  docker-compose exec -T php php --version

            - name: Install Composer dependencies
              run: |
                  echo "Installing Composer dependencies..."
                  docker-compose exec -T php composer install --prefer-dist --no-progress --optimize-autoloader

            - name: Setup database
              run: |
                  echo "Setting up test database..."
                  docker-compose exec -T php php bin/console doctrine:database:create --env=test --if-not-exists
                  docker-compose exec -T php php bin/console doctrine:migrations:migrate --env=test --no-interaction

            - name: Load fixtures
              run: |
                  echo "Loading test fixtures..."
                  docker-compose exec -T php php bin/console doctrine:fixtures:load --env=test --no-interaction

            - name: Run PHPUnit tests
              run: |
                  echo "Running PHPUnit tests..."
                  docker-compose exec -T php ./vendor/bin/phpunit --testdox

            - name: Show logs on failure
              if: failure()
              run: |
                  echo "=== Container Logs ==="
                  docker-compose logs
                  echo "=== MySQL Logs ==="
                  docker-compose logs mysql
                  echo "=== PHP Logs ==="
                  docker-compose logs php

            - name: Cleanup containers
              if: always()
              run: |
                  echo "Cleaning up containers..."
                  docker-compose down -v
                  docker system prune -f