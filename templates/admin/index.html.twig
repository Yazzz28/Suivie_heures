{% extends 'base.html.twig' %}

{% block title %}Panel Admin - Heures des employ√©s{% endblock %}

{% block body %}
    <div class="admin-container">
        <h1 class="page-title">Suivi des heures des employ√©s</h1>

        <div class="users-grid">
            {% for user in users %}
                {% if 'ROLE_USER' in user.roles and 'ROLE_ADMIN' not in user.roles %}
                    <div class="user-card">
                        <div class="card-header">
                            <h4 class="user-name">{{ user.lastName }} {{ user.firstName }}</h4>
                            <div>
                                <button class="toggle-user-btn" data-user-id="{{ user.id }}">Afficher/Masquer</button>
                                <form action="{{ path('app_admin_delete', { userId: user.id }) }}" method="post"
                                      onsubmit="return confirm('Confirmer la suppression de {{ user.firstName }} ?');"
                                      style="display: inline;">
                                    <button type="submit" class="delete-user-btn">üóëÔ∏è</button>
                                </form>
                            </div>
                        </div>
                        <div class="card-body user-details" id="user-details-{{ user.id }}">
                            {% set groupedWorks = {} %}
                            {# Grouper les works par mois/ann√©e #}
                            {% for work in user.works %}
                                {% set key = work.date|date('Y-m') %}
                                {% set groupedWorks = groupedWorks|merge({
                                    (key): (groupedWorks[key] is defined ? groupedWorks[key]|merge([work]) : [work])
                                }) %}
                            {% endfor %}

                            {% if groupedWorks is empty %}
                                <p class="no-data">Aucune donn√©e disponible.</p>
                            {% else %}
                                {% set sortedGroupedWorks = groupedWorks|keys|sort|reverse %}
                                {% for key in sortedGroupedWorks %}
                                    {% set parts = key|split('-') %}
                                    {% set year  = parts[0] %}
                                    {% set month = parts[1] %}
                                    {% set monthName = (year ~ '-' ~ month ~ '-01')|date('F') %}
                                    <div class="month-block">
                                        <div class="export-link">
                                            <a href="{{ path('app_admin_export', { userId: user.id, year: year, month: month }) }}" target="_blank">
                                                üìÑ Exporter le PDF
                                            </a>
                                        </div>
                                        <h5 class="month-title">{{ monthName|trans|capitalize }} {{ year }}</h5>
                                        <button class="sort-toggle-btn" data-target="month-{{ key }}" data-key="{{ key }}">Trier par date ‚Üì</button>
                                        <table class="data-table">
                                            <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>D√©but</th>
                                                <th>Pause</th>
                                                <th>Fin</th>
                                                <th>Transports</th>
                                                <th>Dur√©e nette</th>
                                            </tr>
                                            </thead>
                                            <tbody id="month-{{ key }}">
                                            {% set totalNet = 0 %}
                                            {% set totalTransports = 0 %}
                                            {% for work in groupedWorks[key]|sort((a,b)=>b.date<=>a.date) %}
                                                {% set start = work.startTime? work.startTime.timestamp:0 %}
                                                {% set end   = work.endTime?   work.endTime.timestamp:0 %}
                                                {% set pause = (work.pauseStart and work.pauseEnd)
                                                    ? work.pauseEnd.timestamp-work.pauseStart.timestamp
                                                    : 0 %}
                                                {% set net   = (end-start-pause)//60 %}
                                                {% set totalNet = totalNet + net %}
                                                {% set totalTransports = totalTransports + work.numberOfTransport %}
                                                <tr class="{% if work.dayOf %}day-of{% elseif work.dayOfWhitoutSolde %}day-of-without-solde{% elseif work.isPublicHolidays %}public-holiday{% endif %}">
                                                    <td data-label="Date">{{ work.date|date('d/m/Y') }}</td>
                                                    <td data-label="D√©but">{{ work.startTime|date('H:i') }}</td>
                                                    <td data-label="Pause">
                                                        {% if work.pauseStart and work.pauseEnd %}
                                                            {{ work.pauseStart|date('H:i') }} - {{ work.pauseEnd|date('H:i') }}
                                                        {% else %}<span class="no-data">Aucune</span>{% endif %}
                                                    </td>
                                                    <td data-label="Fin">{{ work.endTime|date('H:i') }}</td>
                                                    <td data-label="Transports">{{ work.numberOfTransport }}</td>
                                                    <td data-label="Dur√©e nette">{{ (net//60) }}h {{ (net%60) }}min</td>
                                                </tr>
                                            {% endfor %}
                                            </tbody>
                                            <tfoot>
                                            <tr>
                                                <th colspan="4" class="footer-total">Total du mois :</th>
                                                <th>{{ totalTransports }}</th>
                                                <th>{{ (totalNet//60) }}h {{ (totalNet%60) }}min</th>
                                            </tr>
                                            </tfoot>
                                        </table>

                                        {# Nombre de jours travaill√©s (exclut cong√©s pay√©s et sans solde) #}
                                        {% set workedDays = 0 %}
                                        {% for work in groupedWorks[key] %}
                                            {% if not work.dayOf and not work.dayOfWhitoutSolde and not work.isPublicHolidays %}
                                                {% set workedDays = workedDays + 1 %}
                                            {% endif %}
                                        {% endfor %}
                                        <div class="monthly-days">
                                            <strong>Jours travaill√©s :</strong> {{ workedDays }}
                                        </div>

                                        {# Total par semaine #}
                                        {% set weeklyGroups = {} %}
                                        {% for work in groupedWorks[key] %}
                                            {% set wk = work.date|date('o-W') %}
                                            {% set weeklyGroups = weeklyGroups|merge({ (wk): (weeklyGroups[wk] is defined ? weeklyGroups[wk]|merge([work]) : [work]) }) %}
                                        {% endfor %}
                                        <div class="weekly-totals">
                                            <h6>Total par semaine</h6>
                                            <ul>
                                                {% for wk in weeklyGroups|keys|sort|reverse %}
                                                    {% set totalNetW=0 %}
                                                    {% set totalTransW=0 %}
                                                    {% for w in weeklyGroups[wk] %}
                                                        {% set s= w.startTime? w.startTime.timestamp:0 %}
                                                        {% set e= w.endTime?   w.endTime.timestamp:0 %}
                                                        {% set p= (w.pauseStart and w.pauseEnd)? w.pauseEnd.timestamp-w.pauseStart.timestamp:0 %}
                                                        {% set netW=(e-s-p)//60 %}
                                                        {% set totalNetW = totalNetW + netW %}
                                                        {% set totalTransW = totalTransW + w.numberOfTransport %}
                                                    {% endfor %}
                                                    <li>Semaine {{ wk|split('-')[1] }} : {{ (totalNetW//60) }}h {{ (totalNetW%60) }}min ‚Äî Transports : {{ totalTransW }}</li>
                                                {% endfor %}
                                            </ul>
                                        </div>
                                    </div>
                                {% endfor %}
                            {% endif %}
                        </div>
                    </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>

    <style>
        /* Global */
        body {
            margin: 0; font-family: Arial, sans-serif; background: #f4f4f4; color: #333;
        }
        a { text-decoration: none; cursor: pointer; }
        .admin-container { max-width: 1200px; margin: 20px auto; padding: 20px; }
        .logout-link { display: inline-block; margin-bottom: 20px; padding: 8px 16px;
            background: #ee0000; color: #fff; border-radius: 25px; transition: .3s; }
        .logout-link:hover { background: #cc1010; }
        .page-title { font-size: 1.8rem; color: #003c8c; margin-bottom: 20px; }
        .users-grid { display: flex; flex-wrap: wrap; gap: 20px; }

        .user-card { flex: 1 1 calc(33.333% - 20px); background: #fff; border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1); display: flex; flex-direction: column; }

        .card-header { background: #0d6efd; color: #fff; padding: 15px;
            border-top-left-radius: 8px; border-top-right-radius: 8px;
            display: flex; justify-content: space-between; align-items: center; }
        .user-name { margin: 0; font-size: 1.2rem; }
        .toggle-user-btn { background: #fff; color: #0d6efd; border: none;
            padding: 5px 10px; border-radius: 15px; cursor: pointer; transition: .3s; }
        .toggle-user-btn:hover { background: #e0e0e0; }
        .delete-user-btn { background: transparent; border: none; font-size: 1.2rem;
            color: #fff; margin-left: 10px; cursor: pointer; }
        .delete-user-btn:hover { color: #ffdddd; }

        .card-body { padding: 15px; display: none; }

        .month-block { background: #fefefe; padding: 15px; margin-bottom: 20px;
            border-left: 5px solid #0d6efd; border-bottom: 5px solid #0d6efd;
            border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        .month-title { font-size: 1.2rem; color: #0d6efd; margin-bottom: 10px; }
        .export-link { text-align: right; margin-bottom: 10px; }
        .export-link a { padding: 6px 12px; border: 1px solid #0d6efd;
            border-radius: 25px; color: #0d6efd; transition: .3s; }
        .export-link a:hover { background: #0d6efd; color: #fff; }

        .data-table { width: 100%; border-collapse: collapse; margin-bottom: 10px; }
        .data-table th, .data-table td { padding: 10px; border: 1px solid #dee2e6; }
        .data-table thead th { background: #f1f1f1; font-weight: bold; }
        .data-table tbody tr:nth-child(even) { background: #f9f9f9; }
        .footer-total { text-align: right; background: #d4edda; color: #155724; }

        .day-of { background: #fff3cd !important; }
        .day-of-without-solde { background: #f8d7da !important; }
        .public-holiday { background: #cce5ff !important; }

        .sort-toggle-btn { background: #0d6efd; color: #fff; padding: 5px 10px; border: none;
            border-radius: 8px; margin-bottom: 10px; cursor: pointer; transition: .3s; }
        .sort-toggle-btn:hover { background: #0b5ed7; }

        .weekly-totals { margin-top: 10px; padding: 10px; background: #eef6ff; border-radius: 8px; }
        .weekly-totals h6 { margin: 0 0 8px; font-size: 1rem; color: #0d6efd; }
        .weekly-totals ul { list-style: none; padding: 0; margin: 0; }
        .weekly-totals li { margin-bottom: 4px; font-size: 0.9rem; }
        /* Vue mobile pour le panel admin */
        @media (max-width: 768px) {
            .users-grid {
                flex-direction: column;
            }
            .user-card {
                flex: 1 1 100%;
                margin: 0 0 20px;
            }
            .card-header {
                flex-direction: column;
                align-items: flex-start;
            }
            .toggle-user-btn, .delete-user-btn {
                margin-top: 10px;
            }
        }

        /* D√©tail des heures : transformation de la table en blocks */
        @media (max-width: 480px) {
            .data-table, .data-table thead, .data-table tbody,
            .data-table th, .data-table td, .data-table tr {
                display: block;
            }
            .data-table thead {
                display: none;
            }
            .data-table tr {
                margin-bottom: 15px;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 10px;
            }
            .data-table td {
                position: relative;
                padding-left: 50%;
                text-align: left;
            }
            .data-table td::before {
                position: absolute;
                left: 10px;
                width: 45%;
                white-space: nowrap;
                font-weight: bold;
            }
            /* D√©finition des labels pour chaque colonne */
            .data-table td:nth-of-type(1)::before { content: "Date"; }
            .data-table td:nth-of-type(2)::before { content: "D√©but"; }
            .data-table td:nth-of-type(3)::before { content: "Pause"; }
            .data-table td:nth-of-type(4)::before { content: "Fin"; }
            .data-table td:nth-of-type(5)::before { content: "Transports"; }
            .data-table td:nth-of-type(6)::before { content: "Dur√©e nette"; }

            /* Cacher le pied de table (totaux) sur mobile ou le d√©placer */
            .data-table tfoot {
                display: none;
            }
            /* Afficher les totaux sous forme de block */
            .monthly-days, .weekly-totals {
                font-size: 0.9rem;
                padding: 10px;
            }
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Toggle affichage
            document.querySelectorAll('.toggle-user-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const id = btn.dataset.userId;
                    const details = document.getElementById(`user-details-${id}`);
                    const show = details.style.display !== 'block';
                    details.style.display = show ? 'block' : 'none';
                    btn.textContent = show ? 'Masquer' : 'Afficher/Masquer';
                });
            });
            // Tri persistant par date
            document.querySelectorAll('.sort-toggle-btn').forEach(btn => {
                const key = btn.dataset.key;
                let asc = localStorage.getItem(`sort_${key}`) === 'asc';
                const sortTable = () => {
                    const tbody = document.getElementById(btn.dataset.target);
                    const rows = Array.from(tbody.querySelectorAll('tr'));
                    rows.sort((a, b) => {
                        const parse = txt => new Date(txt.split('/').reverse().join('-'));
                        const da = parse(a.querySelector('td[data-label="Date"]').textContent);
                        const db = parse(b.querySelector('td[data-label="Date"]').textContent);
                        return asc ? da - db : db - da;
                    });
                    rows.forEach(r => tbody.appendChild(r));
                    btn.textContent = `Trier par date ${asc ? '‚Üë' : '‚Üì'}`;
                };
                sortTable();
                btn.addEventListener('click', () => {
                    asc = !asc;
                    localStorage.setItem(`sort_${key}`, asc ? 'asc' : 'desc');
                    sortTable();
                });
            });
        });
    </script>
{% endblock %}